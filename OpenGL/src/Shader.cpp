#include "Shader.h"

#include <iostream>
#include <fstream>
#include <string>
#include <sstream>

#include "Renderer.h"

Shader::Shader(const std::string& filepath)
	: m_FilePath{filepath}, m_RendererID{0}
{
    // Fill up 'source' with the source code of the shaders.
    // Written in the OpenGL Shading Language (GLSL). The source code explained:
    // @layout(location = 0) - sets the 'position' variable equal to the attribute you have specified
    //                         at index 0 in your vertex buffer (in this case, the position attribute).
    //                         'position' has to be of type vec4, so it casts it implicitly.
    ShaderProgramSource source = ParseShader(filepath);
    m_RendererID = CreateShader(source.VertexSource, source.FragmentSource);
}

Shader::~Shader()
{
    CALL(glDeleteProgram(m_RendererID));
}

ShaderProgramSource Shader::ParseShader(const std::string& filepath)
{
    ShaderProgramSource::ShaderType type = ShaderProgramSource::ShaderType::NONE;
    std::ifstream stream(filepath); // The content of the file we read
    std::string line;               // Will contain what word we currently are reading
    std::stringstream ss[2];        // Will contain the "extracted" source code
    while (getline(stream, line))   // While there is more to read, and then fill up 'line' with current word
    {
        if (line.find("#shader") != std::string::npos)
        {
            if (line.find("vertex") != std::string::npos)
                type = ShaderProgramSource::ShaderType::VERTEX;
            else if (line.find("fragment") != std::string::npos)
                type = ShaderProgramSource::ShaderType::FRAGMENT;
        }
        else
        {
            ss[(int)type] << line << '\n';
        }
    }

    // Will return an object of two components. 
    // The default operator overload for '=' will assign these correctly in the ShaderProgramSource struct.
    return {ss[(int)ShaderProgramSource::ShaderType::VERTEX].str(), ss[(int)ShaderProgramSource::ShaderType::FRAGMENT].str()};
}

unsigned int Shader::CompileShader(unsigned int type, const std::string& source)
{
    // Creates an empty shader object.
    unsigned int id = glCreateShader(type);

    // source.c_str() = &source[0]
    const char* src = source.c_str();

    // Sets the source code for the 'id' shader (will replace all previous source code).
    // @shader - specifies the shader
    // @count  - specifies the number of elements in the input string
    // @string - a pointer to the actual input string
    // @length - specifies an array of string lengths (?)
    CALL(glShaderSource(id, 1, &src, nullptr));

    // Compiles a shader object
    CALL(glCompileShader(id));

    // Checks if shader was created succesfully.
    int result;
    CALL(glGetShaderiv(id, GL_COMPILE_STATUS, &result));
    if (result == GL_FALSE) // 'GL_FALSE' = 0
    {
        int length;
        CALL(glGetShaderiv(id, GL_INFO_LOG_LENGTH, &length));
        // 'alloca' = Most compilers come with this function. Dynamically allocates memory on the stack.
        char* message = (char*)_malloca(length * sizeof(char));
        CALL(glGetShaderInfoLog(id, length, &length, message));
        std::cout << "Failed to compile " << (type == GL_VERTEX_SHADER ? "vertex" : "fragment")
            << " shader!" << std::endl;
        std::cout << message << std::endl;
        CALL(glDeleteShader(id));
        return 0;
    }

    return id;
}

unsigned int Shader::CreateShader(const std::string& vertexShader, const std::string& fragmentShader)
{
    // Creates an empty program object
    unsigned int program = glCreateProgram();
    unsigned int vs = CompileShader(GL_VERTEX_SHADER, vertexShader);
    unsigned int fs = CompileShader(GL_FRAGMENT_SHADER, fragmentShader);

    // Attaches a shader object to a program object. I.e. it puts the puzzle pieces together.
    CALL(glAttachShader(program, vs));
    CALL(glAttachShader(program, fs));

    // Will link the program. Any shaders that are attached will take part in
    // this linking proccess. Will create executables. Can be thought of as compiling the program.
    CALL(glLinkProgram(program));

    // Checks to see whether the executables contained in 'program' can actually execute.
    // The information generated by the validation process will be stored in the program's information log.
    CALL(glValidateProgram(program));

    // We are done using the initial shaders (are now "compiled" into the program), so we can delete them. 
    // This will not delete the source code though, so it can be used later for debugging purposes.
    // 'glDetachShader()' is used to delete the actual source code.
    CALL(glDeleteShader(vs));
    CALL(glDeleteShader(fs));

    return program;
}

void Shader::Bind() const
{
    CALL(glUseProgram(m_RendererID));
}

void Shader::Unbind() const
{
    CALL(glUseProgram(0)); 
}

void Shader::SetUniform1f(const std::string& name, float value)
{
    CALL(glUniform1f(GetUniformLocation(name), value));
}

void Shader::SetUniform4f(const std::string& name, float v0, float v1, float v2, float v3)
{
    // ...4f = 4 floats = vec4
    CALL(glUniform4f(GetUniformLocation(name), v0, v1, v2, v3));
}

int Shader::GetUniformLocation(const std::string& name)
{
    if (m_UniformLocationCache.find(name) != m_UniformLocationCache.end())
        return m_UniformLocationCache[name];

    CALL(int location = glGetUniformLocation(m_RendererID, name.c_str()));
    if (location == -1) 
        std::cout << "Warning: uniform '" << name << "' doesn't exist!" << std::endl;

    m_UniformLocationCache[name] = location;
	return location;
}
